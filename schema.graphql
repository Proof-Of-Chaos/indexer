enum ProposalType {
  Preimage
  DemocracyProposal
  TechCommitteeProposal
  Referendum
  CouncilMotion
}

enum ReferendumStatus {
  Started
  Passed
  NotPassed
  Cancelled
  Executed
}

enum PreimageStatus {
  Noted
  Used
  Invalid
  Missing
  Reaped
}

enum ReferendumOriginType {
  CouncilMotion
  DemocracyProposal
  TechCommitteeMotion
}

enum ReferendumThresholdType {
  SuperMajorityApprove
  SuperMajorityAgainst
  SimpleMajority
}

type ReferendumThreshold {
  type: ReferendumThresholdType!
}

type CouncilMotion @entity {
  id: ID!
  index: Int! @index
  hash: String!
  proposalHash: String
  proposer: String
  type: ReferendumOriginType
}

type TechCommitteeMotion @entity {
  id: ID!
  index: Int! @index
  hash: String!
  proposalHash: String
  proposer: String
  type: ReferendumOriginType
}

type DemocracyProposal @entity {
  id: ID!
  index: Int! @index
  hash: String!
  proposalHash: String
  proposer: String
  type: ReferendumOriginType
}

type ReferendumRelation @entity {
  id: ID!,
  referendumIndex: Int @index
  proposalHash: String
  referendumId: ID
  underlyingId: ID!
  underlyingIndex: Int!
  proposer: String
  underlyingType: ReferendumOriginType!
}

type Referendum @entity {
  id: ID!
  hash: String! @index
  index: Int! @index
  threshold: ReferendumThreshold!
  status: ReferendumStatus!
  statusHistory: [ReferendumStatusHistory!]!
  createdAtBlock: Int! @index
  createdAt: DateTime! @index
  endedAtBlock: Int
  endedAt: DateTime
  updatedAtBlock: Int
  updatedAt: DateTime
  proposer: String
  preimage: Preimage
  totalIssuance: BigInt!
  voting: [Vote!] @derivedFrom(field: "referendum")
  endsAt: Int!
  delay: Int!
  origin: ReferendumOriginType
}

type Preimage @entity {
  id: ID!
  hash: String! @index
  proposer: String!
  deposit: BigInt!
  proposedCall: ProposedCall
  status: PreimageStatus!
  statusHistory: [PreimageStatusHistory!]!
  createdAtBlock: Int! @index
  createdAt: DateTime! @index
  updatedAtBlock: Int
  updatedAt: DateTime
}

type ReferendumStatusHistory {
  status: ReferendumStatus!
  block: Int!
  timestamp: DateTime!
}

type PreimageStatusHistory {
  status: PreimageStatus!
  block: Int!
  timestamp: DateTime!
}

type ProposedCall {
  section: String!
  method: String!
  args: JSON
  description: String!
}

enum VoteDecision {
  yes
  no
  abstain
}

type StandardVoteBalance {
  value: BigInt
}

type SplitVoteBalance {
  aye: BigInt
  nay: BigInt
}

union VoteBalance = StandardVoteBalance | SplitVoteBalance

type Vote @entity {
  id: ID!
  voter: String
  referendumId: ID!
  referendumIndex: Int!
  referendum: Referendum!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  decision: VoteDecision!
  balance: VoteBalance!
  lockPeriod: Int
}

type Config @entity {
  id: ID!
  referendumIndex: Int! @index
  version: Int! @index
  blockNumber: Int! @index
  min: String
  max: String
  first: String
  blockCutOff: String
  directOnly: Boolean
  createNewCollection: Boolean
  newCollectionSymbol: String
  newCollectionPath: String
  newCollectionFile: String
  newCollectionName: String
  newCollectionDescription: String
  makeEquippable: [String]
  babyBonus: Int
  toddlerBonus: Int
  adolescentBonus: Int
  adultBonus: Int
  minAmount: Int
  seed: String
  options: [Option!] @derivedFrom(field: "config")
  timestamp: DateTime
}
        
type Option @entity {
  id: ID!
  configId: ID!
  config: Config!
  transferable: Int
  symbol: String
  text: String
  artist: String
  creativeDirector: String
  rarity: String
  itemName: String
  minRoyalty: Int
  maxRoyalty: Int
  isDefault: Boolean
  resources: [Resource!] @derivedFrom(field: "option")
  metadataCidDirect: String
  metadataCidDelegated: String
}

type Resource @entity {
  id: ID!
  optionId: ID!
  option: Option!
  name: String
  mainCid: String
  thumbCid: String
  text: String
  artist: String
  creativeDirector: String
  rarity: String
  itemName: String
  slot: String
  title: String
  metadataCidDirect: String
  metadataCidDelegated: String
}

type Distribution @entity {
  id: ID!
  referendumIndex: Int!
  blockNumber: Int! @index
  distributionVersion: Int!
  wallet: String @index
  amountConsidered: BigInt! @index
  indexItemReceived: Int
  dragonEquipped: String
  chancesAtItems: [Float]
  timestamp: DateTime
}

type AnswerOption @entity {
  id: ID!
  questionId: ID!
  question: Question
  text: String
}

type CorrectAnswer @entity {
  id: ID!
  question: Question!
  questionId: ID!
  version: Int!
  blockNumber: Int! @index
  correctIndex: Int!
  submitter: String!
  timestamp: DateTime!
}

type Question @entity {
  id: ID!
  quizId: ID!
  quiz: Quiz
  text: String
  answerOptions: [AnswerOption] @derivedFrom(field: "question")
  indexCorrectAnswerHistory: [CorrectAnswer] @derivedFrom(field: "question")
}

type Quiz @entity {
  id: ID!
  referendumIndex: Int
  blockNumber: Int! @index
  creator: String @index
  questions: [Question!] @derivedFrom(field: "quiz")
  submissions: [QuizSubmission!] @derivedFrom(field: "quiz")
  version: Int
  timestamp: DateTime
}

type QuizSubmission @entity {
  id: ID!
  referendumIndex: Int!
  blockNumber: Int! @index
  wallet: String! @index
  quiz: Quiz
  quizId: ID!
  version: Int
  answers: [Int!]
  timestamp: DateTime!
}